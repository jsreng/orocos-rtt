#ifndef ORO_OPERATION_INTERFACE_IDL
#define ORO_OPERATION_INTERFACE_IDL

#ifdef CORBA_IS_TAO
//resolves LNK2005
#include <tao/orb.idl>
#endif

#include "Operations.idl"

module RTT
{
  module corba
  {
    typedef sequence<string> CMethodList;
    typedef sequence<string> CCommandList;
    typedef sequence<CExpression> CArguments;

    /**
     * When querying a method or command for
     * the kinds of arguments it takes, this
     * structure is returned for each argument.
     */
    struct CArgumentDescription
    {
      string name;
      string description;
      string type;
    };

    typedef sequence<CArgumentDescription> CDescriptions;

    exception CNoSuchNameException
    {
      string name;
    };

    /**
     * A CMethod interface delivers objects which contain expressions.
     * @ingroup CompIDL
     */
    interface CMethodInterface
    {

      /**
       * Get a list of all methods.
       */
      CMethodList getMethods();

      /**
       * Get a list of all arguments of a given method.
       */
      CDescriptions getArguments(in string method) raises (CNoSuchNameException);

      /**
       * Get a result type of a given method.
       */
      string getResultType(in string method) raises (CNoSuchNameException);

      /**
       * Get a description of a given method.
       */
      string getDescription(in string method) raises (CNoSuchNameException);

      /**
       * Create a method and fill in the arguments later on.
       */
      //CMethod createMethod(in string method) raises (CNoSuchNameException);

      /**
       * Create a method with CExpression arguments.
       */
      CMethod createMethod(in string method, in CArguments args) raises (CNoSuchNameException,
								       CWrongNumbArgException,
								       CWrongTypeArgException);
      /**
       * Create a method with Any arguments.
       */
      CMethod createMethodAny(in string method, in CAnyArguments args) raises ( CNoSuchNameException,
									      CWrongNumbArgException,
									      CWrongTypeArgException);
    };

    /**
     * A CCommand interface delivers objects which contain asynchronous commands.
     * @ingroup CompIDL
     */
    interface CCommandInterface
    {
      /**
       * Get a list of all commands.
       */
      CCommandList getCommands();

      /**
       * Get a list of all arguments of a given command.
       */
      CDescriptions getArguments(in string command) raises (CNoSuchNameException);

      /**
       * Get a result type of a given command.
       */
      string getResultType(in string command) raises (CNoSuchNameException);

      /**
       * Get a description of a given command.
       */
      string getDescription(in string command) raises (CNoSuchNameException);

      /**
       * Create a command and fill in the arguments later.
       */
      //CCommand createCommand(in string command) raises (CNoSuchNameException);

      /**
       * Create a command of an object.
       */
      CCommand createCommand(in string command, in CArguments args) raises ( CNoSuchNameException,
									   CWrongNumbArgException,
									   CWrongTypeArgException);

      /**
       * Create a command of an object with any arguments.
       */
      CCommand createCommandAny(in string command, in CAnyArguments args) raises ( CNoSuchNameException,
										 CWrongNumbArgException,
										 CWrongTypeArgException);

    };
  };
};
#endif
